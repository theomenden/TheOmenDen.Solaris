plugins {
    id 'fabric-loom' version '1.8.+'
    id 'idea'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'io.freefair.lombok' version '8.+'
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'nebula.release' version '19.0.+'
}

group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name "Modrinth"; url "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
        // For Gradle 5.1 and above, limit it to just AE2
        content {
            includeGroup 'appeng'
        }
    }
    maven {
        name = "Jitpack"
        url = uri("https://jitpack.io/")
    }
}
dependencies {
    compileOnly("com.google.code.findbugs:jsr305:3.0.2")
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:${project.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${project.minecraft_version}"

    modImplementation ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("appeng:appliedenergistics2-fabric:${project.ae2_version}:api"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("maven.modrinth:modern-industrialization:${project.mi_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include modApi("teamreborn:energy:${project.energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude group: "net.fabricmc", module: "fabric-loader"
    }
    implementation 'org.apache.commons:commons-text:1.11.0'
}

def version = project.version.toString()

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
